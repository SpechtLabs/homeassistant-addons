blueprint:
  name: Philips Tap Dial Switch (Z2M)
  description:
    Control lights with a Philips Hue Tap Switch. Use the four buttons
    to control up to four light(s) with an on/off toggle. The dial can be used to
    dim the most recently used light.
  source_url: https://github.com/SpechtLabs/homeassistant-addons/blob/main/blueprints/hue_tab_dial_z2m.yaml
  domain: automation
  input:
    remote:
      name: (Zigbee2MQTT) TapDial Remote Name
      description: The name of the TapDial Remote as defined in z2m (e.g. Livingroom TapDial)
      default: ""
    base_topic:
      name: (Zigbee2MQTT) Base mqtt topic
      description: The base topic as configured in z2m
      default: zigbee2mqtt
    dim_scale:
      name: Diming Scale
      description:
        Scale factor for the dimming. This value will control how much
        (in %) the light will be dimmed. So lower number, more gradual dimming. Larger
        number, faster dimming.
      default: 10.0
      selector:
        number:
          min: 1.0
          max: 25.0
          step: 1.0
          mode: slider
    transition_sec:
      name: Transition Seconds
      description: Time until reaching the new brightness setting
      default: 0.5
      selector:
        number:
          min: 0.0
          max: 2.0
          step: 0.1
          mode: slider
    dimmer_light:
      name: Dimmer Light
      description: The light(s) to control with the dimmer dial.
      selector:
        target:
          entity:
            - {}
    button_1_short:
      name: Button 1 - single click
      description: Action to run on single click on Button 1
      default: []
      selector:
        action: {}

    button_1_long_hold:
      name: Button 1 - long press (hold)
      description: Action to run on holding down on Button 1
      default: []
      selector:
        action: {}
    button_1_long_release:
      name: Button 1 - long press (release)
      description: Action to run on releasing a long-click on Button 1
      default: []
      selector:
        action: {}
    button_2_short:
      name: Button 2 - single click
      description: Action to run on single click on Button 2
      default: []
      selector:
        action: {}
    button_2_long_hold:
      name: Button 2 - long press (hold)
      description: Action to run on holding down on Button 2
      default: []
      selector:
        action: {}
    button_2_long_release:
      name: Button 2 - long press (release)
      description: Action to run on releasing a long-click on Button 2
      default: []
      selector:
        action: {}
    button_3_short:
      name: Button 3 - single click
      description: Action to run on single click on Button 3
      default: []
      selector:
        action: {}
    button_3_long_hold:
      name: Button 3 - long press (hold)
      description: Action to run on holding down on Button 3
      default: []
      selector:
        action: {}
    button_3_long_release:
      name: Button 3 - long press (release)
      description: Action to run on releasing a long-click on Button 3
      default: []
      selector:
        action: {}
    button_4_short:
      name: Button 4 - single click
      description: Action to run on single click on Button 4
      default: []
      selector:
        action: {}
    button_4_long_hold:
      name: Button 4 - long press (hold)
      description: Action to run on holding down on Button 4
      default: []
      selector:
        action: {}
    button_4_long_release:
      name: Button 4 - long press (release)
      description: Action to run on releasing a long-click on Button 4
      default: []
      selector:
        action: {}

variables:
  dim_scale: !input dim_scale
  remote: !input remote

trigger_variables:
  base_topic: !input base_topic
  remote: !input remote

mode: restart

trigger:
  - platform: mqtt
    topic: "{{ base_topic ~ '/' ~ remote }}"

actions:
  - variables:
      command: "{{ trigger.payload_json.action }}"

  - choose:
      # Button 1
      - conditions:
          - "{{ command == 'button_1_press_release' }}"
        sequence: !input button_1_short
      - conditions:
          - "{{ command == 'button_1_hold' }}"
        sequence: !input button_1_long_hold
      - conditions:
          - "{{ command == 'button_1_hold_release' }}"
        sequence: !input button_1_long_release

      # Button 2
      - conditions:
          - "{{ command == 'button_2_press_release' }}"
        sequence: !input button_2_short
      - conditions:
          - "{{ command == 'button_2_hold' }}"
        sequence: !input button_2_long_hold
      - conditions:
          - "{{ command == 'button_2_hold_release' }}"
        sequence: !input button_2_long_release

      # Button 3
      - conditions:
          - "{{ command == 'button_3_press_release' }}"
        sequence: !input button_3_short
      - conditions:
          - "{{ command == 'button_3_hold' }}"
        sequence: !input button_3_long_hold
      - conditions:
          - "{{ command == 'button_3_hold_release' }}"
        sequence: !input button_3_long_release

      # Button 4
      - conditions:
          - "{{ command == 'button_4_press_release' }}"
        sequence: !input button_4_short
      - conditions:
          - "{{ command == 'button_4_hold' }}"
        sequence: !input button_4_long_hold
      - conditions:
          - "{{ command == 'button_4_hold_release' }}"
        sequence: !input button_4_long_release

      # Dimmer Dial
      - conditions:
          - "{{ command == 'dial_rotate_left_slow' }}"
        sequence:
          - service: light.turn_on
            target: !input dimmer_light
            data:
              brightness_step_pct: "{{ -dim_scale }}"
              transition: 1

      - conditions:
          - "{{ command == 'dial_rotate_right_slow' }}"
        sequence:
          - service: light.turn_on
            target: !input dimmer_light
            data:
              brightness_step_pct: "{{ dim_scale }}"
              transition: 1

      - conditions:
          - "{{ command == 'dial_rotate_left_fast' }}"
        sequence:
          - service: light.turn_on
            target: !input dimmer_light
            data:
              brightness_step_pct: "{{ -(dim_scale * 2) }}"
              transition: 1

      - conditions:
          - "{{ command == 'dial_rotate_right_fast' }}"
        sequence:
          - service: light.turn_on
            target: !input dimmer_light
            data:
              brightness_step_pct: "{{ (dim_scale * 2) }}"
              transition: 1
